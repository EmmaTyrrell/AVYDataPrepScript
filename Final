# sample script that goes from Avy point layers to final sample analysis

# import directories
import arcpy
from arcpy.sa import *
print("imported modules")

print("establishing parameters ... ")
# set master workspace and overwrite conditions
arcpy.env.workspace = "C:\\Users\\Emma Tyrrell\\Documents\\PSU_SDS\\THESIS_230226\\Data\\WorkingData"
gdbName = "C:\\Users\\Emma Tyrrell\\Documents\\PSU_SDS\\THESIS_230226\\Data\\StaticDataGDB.gdb"
projectBoundary = gdbName + "\\ProjectBoundary"
outputData = arcpy.env.workspace + "\\OutputProcessing"
mosaicBit = 1
mosaicPixelType = "32_BIT_FLOAT"
GCSsr = arcpy.SpatialReference(4326)
PCSsr = arcpy.SpatialReference(6431)
arcpy.env.overwriteOutput = True
arcpy.env.qualifiedFieldNames = False
print("parameters established.")

print("creating avalanche point class ... ")
try:
    # establish local parameters
    AvyTable = arcpy.env.workspace + "\\AvyData\\CAICAvyExplorer_data.csv"
    AvyDataWorkspace = arcpy.env.workspace + "\\AvyData"
    outAvyPointClass = outputData + "\\AvyPointClass.shp"
    projectedAvyOutPointClass = outputData + "\\AvyPointClass_projected.shp"
    masterAvyPointClass = AvyDataWorkspace + "\\MasterAvyPointClass.shp"
    xField = "X_Coord"
    yField = "Y_Coord"
    try:
        # run tool for XY class
        arcpy.XYTableToPoint_management(AvyTable, outAvyPointClass, xField, yField, "", GCSsr)
        print("- point class created")

        # project class into proper coordinate system
        arcpy.Project_management(outAvyPointClass, projectedAvyOutPointClass, PCSsr)
        print("- coordinate system projected")

        # add field that will be in accordance with the date field
        # clip points to boundary to create master file
        arcpy.Clip_analysis(projectedAvyOutPointClass, projectBoundary, masterAvyPointClass)
        print("- clipped avy feature")
    except Exception as ex:
        print(ex)
    try:
        # establish local parameters
        roadsWorkspace = arcpy.env.workspace + "\\AdminData\\Roads"
        highways = roadsWorkspace + "\\Highways_clip.shp"
        majorRoads = roadsWorkspace + "\\MajorRoads_clip.shp"
        localRoads = roadsWorkspace + "\\LocalRoads_clip.shp"

        try:
            # create highway buffers
            highway_buffer = roadsWorkspace + "\\HighwayBuffer100m.shp"
            arcpy.Buffer_analysis(highways, highway_buffer, "100 meters", "FULL", "ROUND")
            print("- highway buffer created")

            # merge all roads layers
            allRoads = roadsWorkspace + "\\AllRoads.shp"
            arcpy.Merge_management([highways, majorRoads, localRoads], allRoads)
            print("- roads merged")

            # create roads buffer
            allRoads_buffer = roadsWorkspace + "\\RoadsBuffer100m.shp"
            arcpy.Buffer_analysis(allRoads, allRoads_buffer, "100 meters", "FULL", "ROUND")
            print("- all roads buffer created")

            # clip avy points to buffer, make highway avalanches
            highwayAvyData = AvyDataWorkspace + "\\HighwayAvalanches.shp"
            arcpy.Clip_analysis(masterAvyPointClass, highway_buffer, highwayAvyData)
            print("- highway avalanches class created")
        except Exception as ex:
            print(ex)
    except Exception as ex:
        print(ex)
    try:
        # delete unclipped data
        arcpy.Delete_management([projectedAvyOutPointClass, outAvyPointClass])
        print("- deleted unclipped data")
    except Exception as ex:
        print(ex)
except Exception as ex:
    print(ex)
print("Highway avalanches and all avy point classes created. Nice!")

# slope and aspect on mosaic data set
print("creating slope, aspect, and curvature fields ...")
try:
    # establish local parameters
    demMosaic = gdbName + "\\demMosaic2"
    demFiles = arcpy.env.workspace + "\\DEM"
    terrainWorkspace = arcpy.env.workspace + "\\Terrain"
    try:
        # set slope parameters
        arcpy.CheckOutExtension("Spatial")
        outMeasurement = "DEGREE"
        slope = gdbName + "\\slope"
        slopePolygons = terrainWorkspace + "\\AvySlope_Polygons.shp"
        slope_clipped = terrainWorkspace + "\\Slope_Clipped.tif"
        slopeReclass = terrainWorkspace + "\\Slope_Reclassified.tif"

        # create slope
        outSlope = Slope(demMosaic, outMeasurement)
        outSlope.save(slope)
        print("- slope created")
        arcpy.Clip_management(slope, projectBoundary, slope_clipped)
        print("- slope clipped")

        # reclass slope and make them polygons
        reclass_Slope = Reclassify(slope_clipped, "Value", RemapRange([[0, 25, "NODATA"], [25, 30, 1], [30, 35, 2],
                                                                       [35, 40, 3], [40, 45, 4], [45, 50, 5],
                                                                       [50, 55, 6], [55, 60, 7], [60, 90, "NODATA"]]))
        reclass_Slope.save(slopeReclass)
        print("- rasters reclassified")

        # create slope polygons
        arcpy.RasterToPolygon_conversion(slopeReclass, slopePolygons)
        print("- slope polygons created")
    except Exception as ex:
        print(ex)
    try:
        # set aspect parameters
        arcpy.CheckOutExtension("Spatial")
        aspect = gdbName + "\\aspect"
        aspect_clipped = terrainWorkspace + "\\Aspect_Clipped.tif"
        aspectReclass = terrainWorkspace + "\\Aspect_Reclassified.tif"

        # create aspect
        outAspect = Aspect(demMosaic)
        outAspect.save(aspect)
        print("- aspect created")
        arcpy.Clip_management(aspect, projectBoundary, aspect_clipped)
        print("- aspect clipped")

        # reclass aspect and make polygons
        reclass_aspect = Reclassify(aspect_clipped, "Value",
                                    RemapRange([[0, 22.5, 1], [22.5, 67.5, 2], [67.5, 112.5, 3],
                                                [112.5, 157.5, 4], [157.5, 202.5, 5],
                                                [202.5, 247.5, 6], [247.5, 292.5, 7],
                                                [292.5, 337.5, 8], [337.5, 360, 9]]))
        reclass_aspect.save(aspectReclass)
        print("- aspect reclassified")

        # make aspect polygons
        aspectPolygons = terrainWorkspace + "\\AvyAspect_Polygons.shp"
        arcpy.RasterToPolygon_conversion(aspectReclass, aspectPolygons)
        print("- aspect polygons created")
        # add field to aspect and correlate names to numbers
        arcpy.AddField_management(aspectPolygons, "Compass", "TEXT", "", "", 20, "Compass")
        print("- new field created")

        # update cursor
        fc = aspectPolygons
        fields = ["gridcode", "Compass"]
        with arcpy.da.UpdateCursor(fc, fields) as cursor:
            for row in cursor:
                if row[0] == 1:
                    row[1] = "North"
                if row[0] == 2:
                    row[1] = "Northeast"
                if row[0] == 3:
                    row[1] = "East"
                if row[0] == 4:
                    row[1] = "Southeast"
                if row[0] == 5:
                    row[1] = "South"
                if row[0] == 6:
                    row[1] = "Southwest"
                if row[0] == 7:
                    row[1] = "West"
                if row[0] == 8:
                    row[1] = "Northwest"
                if row[0] == 9:
                    row[1] = "North"
                if row[0] == -1:
                    row[1] = "Flat"
                cursor.updateRow(row)
        print("- field updated")
    except Exception as ex:
        print(ex)
    try:
        # set curvature parameters
        curvature = gdbName + "\\curvature"
        profileCurvature = gdbName + "\\ProfileCurvature"
        planCurvature = gdbName + "\\PlanCurvature"
        curvature_clipped = terrainWorkspace + "\\Curvature_Clipped.tif"
        profileCurvature_clipped = terrainWorkspace + "\\ProfileCurvature_Clipped.tif"
        planCurvature_clipped = terrainWorkspace + "\\PlanCurvature_Clipped.tif"
        profile_reclass = terrainWorkspace + "\\profile_reclass.tif"
        plan_reclass = terrainWorkspace + "\\planCurve_reclass.tif"
        profileCurve_polygons = terrainWorkspace + "\\profileCurve_polygons.shp"
        planCurve_polygons = terrainWorkspace + "\\planCurve_polygons.shp"
        posProfile_CurvePoly = terrainWorkspace + "\\ProfileCurve_accelerate_poly.shp"
        negPlan_CurvePoly = terrainWorkspace + "\\PlanarCurve_funnel_poly.shp"
        posProfile_CurvePoly_lyr = terrainWorkspace + "\\ProfileCurve_accelerate_lyr"
        negPlan_CurvePoly_lyr = terrainWorkspace + "\\PlanarCurve_funnel_poly_lyr"

        # create curvature
        Curvature(demMosaic, "", profileCurvature, planCurvature)
        print("- plan and profile curvature created")
        outCurve = Curvature(demMosaic)
        outCurve.save(curvature)
        print("- curvature whole created")

        # clip files
        arcpy.Clip_management(curvature, projectBoundary, curvature_clipped)
        arcpy.Clip_management(profileCurvature, projectBoundary, profileCurvature_clipped)
        arcpy.Clip_management(planCurvature, projectBoundary, planCurvature_clipped)
        print("- curvature files clipped")

        # reclassify for couliors and accelerating
        reclass_profileCurve = Reclassify(planCurvature_clipped, "Value", RemapRange([[-4, -.00001, 1], [0, 0, 2],
                                          [0.00001, 4, 3]]))
        reclass_profileCurve.save(profile_reclass)
        print("- profile curvature reclassified")
        reclass_planCurve = Reclassify(planCurvature_clipped, "Value", RemapRange([[-4, -.00001, 1], [0, 0, 2],
                                       [0.00001, 4, 3]]))
        reclass_planCurve.save(plan_reclass)
        print("- profile curvature reclassified")

        # convert profile curvatures to polygons
        arcpy.RasterToPolygon_conversion(profile_reclass, profileCurve_polygons)
        where_clause_pro = "gridcode = 3"
        arcpy.MakeFeatureLayer_management(profileCurve_polygons, posProfile_CurvePoly_lyr, where_clause_pro)
        arcpy.CopyFeatures_management(posProfile_CurvePoly_lyr, posProfile_CurvePoly)

        print("- positive profile polygons creates -- avalanches will accelerate here")

        # convert plan curvatures to polygons
        arcpy.RasterToPolygon_conversion(plan_reclass, planCurve_polygons)
        where_clause_plan = "gridcode = 1"
        arcpy.MakeFeatureLayer_management(planCurve_polygons, negPlan_CurvePoly_lyr, where_clause_plan)
        arcpy.CopyFeatures_management(negPlan_CurvePoly_lyr, negPlan_CurvePoly)
        print("- negative planar polygons created -- avalanche funnels ")
    except Exception as ex:
        print(ex)
    try:
        slope = gdbName + "\\slope"
        curvature = gdbName + "\\curvature"
        aspect = gdbName + "\\aspect"
        profileCurvature = gdbName + "\\ProfileCurvature"
        planCurvature = gdbName + "\\PlanCurvature"
        profile_reclass = terrainWorkspace + "\\profile_reclass.tif"
        plan_reclass = terrainWorkspace + "\\planCurve_reclass.tif"
        profileCurve_polygons = terrainWorkspace + "\\profileCurve_polygons.shp"
        slopeReclass = terrainWorkspace + "\\Slope_Reclassified.tif"
        aspectReclass = terrainWorkspace + "\\Aspect_Reclassified.tif"
        # delete files
        arcpy.Delete_management([slope, aspect, curvature, profileCurvature, planCurvature, profile_reclass,
                                 plan_reclass, profileCurve_polygons, aspectReclass, slopeReclass])
        print("- deleted un-clipped data")
    except Exception as ex:
        print(ex)
except Exception as ex:
    print(ex)
print("slope, aspect, curvature fields created. Sweet!")

# create ndvi polygons
print("creating vegetation variables that will be important for runout information ... ")
try:
    # try 2017 NDVI
    try:
        # establish local parameters
        ndviWorkspace = arcpy.env.workspace + "\\LandsatNDVI"
        terrainWorkspace = arcpy.env.workspace + "\\Terrain"
        landsat2017file = ndviWorkspace + "\\2017\\LC08_L1TP_035034_20170106_20200905_02_T1_MTL.txt"
        ndvi2017file = outputData + "\\ndvi2017File.tif"
        try:
            # process ndvi file
            ndvi_raster = arcpy.ia.NDVI(landsat2017file, 5, 4)
            ndvi_raster.save(ndvi2017file)
            print("- 2017 NDVI raster created and saved")

            # clip ndvi file
            ndvi2017_clip = ndviWorkspace + "\\ndvi2017_clip.tif"
            arcpy.Clip_management(ndvi2017file, projectBoundary, ndvi2017_clip)
            print("- ndvi file clipped")

            # reclassify ndvi file
            reclass_ndvi2017 = Reclassify(ndvi2017_clip, "Value", RemapRange([[-1, 0, "NODATA"], [0, 0.1, 1],
                                                                              [0.1, 0.5, 2], [0.5, 1, 3]]))
            reclass_ndvi2017.save(ndviWorkspace + "\\ndvi2017_clip_reclass.tif")
            print("- ndvi 2017 reclassified")

            # convert to polygons
            reclass_ndvi2017 = ndviWorkspace + "\\ndvi2017_clip_reclass.tif"
            ndvi2017_polygons = ndviWorkspace + "\\ndvi2017_polygons.shp"
            arcpy.RasterToPolygon_conversion(reclass_ndvi2017, ndvi2017_polygons)
            print("- shapefile for 2017 converted to polygons")

            # add field
            arcpy.AddField_management(ndvi2017_polygons, "VEG_DESC", "TEXT", "", "", 35, "VEG_DESC")
            print("- veg field created")
            arcpy.AddField_management(ndvi2017_polygons, "YEAR", "TEXT", "", "", 4, "YEAR")
            print("- year field created")

            # update cursor
            fc = ndvi2017_polygons
            fields = ["gridcode", "VEG_DESC"]
            with arcpy.da.UpdateCursor(fc, fields) as cursor:
                for row in cursor:
                    if row[0] == 1:
                        row[1] = "Bare Earth"
                    if row[0] == 2:
                        row[1] = "Sparse Vegetation"
                    if row[0] == 3:
                        row[1] = "Heavy Vegetation"
                    cursor.updateRow(row)
            print("- veg field updated")

            # calculate year field
            fc = ndvi2017_polygons
            fields = ["gridcode", "YEAR"]
            with arcpy.da.UpdateCursor(fc, fields) as cursor:
                for row in cursor:
                    if row[0] < 4:
                        row[1] = "2017"
                    cursor.updateRow(row)
            print("- year field updated")
        except Exception as ex:
            print(ex)
    except Exception as ex:
        print(ex)

    # trying 2018 NDVI
    try:
        # establish local parameters
        ndviWorkspace = arcpy.env.workspace + "\\LandsatNDVI"
        terrainWorkspace = arcpy.env.workspace + "\\Terrain"
        landsat2018file = ndviWorkspace + "\\2018\\LC08_L1TP_035034_20180226_20200902_02_T1_MTL.txt"
        ndvi2018file = outputData + "\\ndvi2018File.tif"
        try:
            # process ndvi file
            ndvi_raster = arcpy.ia.NDVI(landsat2018file, 5, 4)
            ndvi_raster.save(ndvi2018file)
            print("- 2018 NDVI raster created and saved")

            # clip ndvi file
            ndvi2018_clip = ndviWorkspace + "\\ndvi2018_clip.tif"
            arcpy.Clip_management(ndvi2018file, projectBoundary, ndvi2018_clip)
            print("- 2018 ndvi file clipped")

            # reclassify ndvi file
            reclass_ndvi2018 = Reclassify(ndvi2018_clip, "Value", RemapRange([[-1, 0, "NODATA"], [0, 0.1, 1],
                                                                              [0.1, 0.5, 2], [0.5, 1, 3]]))
            reclass_ndvi2018.save(ndviWorkspace + "\\ndvi2018_clip_reclass.tif")
            print("- 2018 ndvi reclassified")

            # convert to polygons
            reclass_ndvi2018 = ndviWorkspace + "\\ndvi2018_clip_reclass.tif"
            ndvi2018_polygons = ndviWorkspace + "\\ndvi2018_polygons.shp"
            arcpy.RasterToPolygon_conversion(reclass_ndvi2018, ndvi2018_polygons)
            print("- shapefile for 2018 converted to polygons")

            # add field
            arcpy.AddField_management(ndvi2018_polygons, "VEG_DESC", "TEXT", "", "", 35, "VEG_DESC")
            print("- veg field created")
            arcpy.AddField_management(ndvi2018_polygons, "YEAR", "TEXT", "", "", 4, "YEAR")
            print("- year field created")

            # update cursor
            fc = ndvi2018_polygons
            fields = ["gridcode", "VEG_DESC"]
            with arcpy.da.UpdateCursor(fc, fields) as cursor:
                for row in cursor:
                    if row[0] == 1:
                        row[1] = "Bare Earth"
                    if row[0] == 2:
                        row[1] = "Sparse Vegetation"
                    if row[0] == 3:
                        row[1] = "Heavy Vegetation"
                    cursor.updateRow(row)
            print("- veg field updated")

            # calculate year field
            fc = ndvi2018_polygons
            fields = ["gridcode", "YEAR"]
            with arcpy.da.UpdateCursor(fc, fields) as cursor:
                for row in cursor:
                    if row[0] < 4:
                        row[1] = "2018"
                    cursor.updateRow(row)
            print("- year field updated")
        except Exception as ex:
            print(ex)
    except Exception as ex:
        print(ex)

    # trying 2019 NDVI
    try:
        # establish parameters for ndvi
        ndviWorkspace = arcpy.env.workspace + "\\LandsatNDVI"
        terrainWorkspace = arcpy.env.workspace + "\\Terrain"
        landsat2019file = ndviWorkspace + "\\2019\\LC08_L1TP_035034_20190128_20200829_02_T1_MTL.txt"
        ndvi2019file = outputData + "\\ndvi2019File.tif"
        try:
            # process ndvi file
            ndvi_raster = arcpy.ia.NDVI(landsat2019file, 5, 4)
            ndvi_raster.save(ndvi2019file)
            print("- 2019 NDVI raster created and saved")

            # clip ndvi file
            ndvi2019_clip = ndviWorkspace + "\\ndvi2019_clip.tif"
            arcpy.Clip_management(ndvi2019file, projectBoundary, ndvi2019_clip)
            print("- 2019 ndvi file clipped")

            # reclassify ndvi file
            reclass_ndvi2019 = Reclassify(ndvi2019_clip, "Value", RemapRange([[-1, 0, "NODATA"], [0, 0.1, 1],
                                                                              [0.1, 0.5, 2], [0.5, 1, 3]]))
            reclass_ndvi2019.save(ndviWorkspace + "\\ndvi2019_clip_reclass.tif")
            print("- ndvi 2019 reclassified")

            # create polygons
            reclass_ndvi2019 = ndviWorkspace + "\\ndvi2019_clip_reclass.tif"
            ndvi2019_polygons = ndviWorkspace + "\\ndvi2019_polygons.shp"
            arcpy.RasterToPolygon_conversion(reclass_ndvi2019, ndvi2019_polygons)
            print("- shapefile for 2019 converted to polygons")

            # add fields
            arcpy.AddField_management(ndvi2019_polygons, "VEG_DESC", "TEXT", "", "", 35, "VEG_DESC")
            print("- veg field created")
            arcpy.AddField_management(ndvi2019_polygons, "YEAR", "TEXT", "", "", 4, "YEAR")
            print("- year field created")

            # update cursor
            fc = ndvi2019_polygons
            fields = ["gridcode", "VEG_DESC"]
            with arcpy.da.UpdateCursor(fc, fields) as cursor:
                for row in cursor:
                    if row[0] == 1:
                        row[1] = "Bare Earth"
                    if row[0] == 2:
                        row[1] = "Sparse Vegetation"
                    if row[0] == 3:
                        row[1] = "Heavy Vegetation"
                    cursor.updateRow(row)
            print("- veg field updated")

            # calculate year field
            fc = ndvi2019_polygons
            fields = ["gridcode", "YEAR"]
            with arcpy.da.UpdateCursor(fc, fields) as cursor:
                for row in cursor:
                    if row[0] < 4:
                        row[1] = "2019"
                    cursor.updateRow(row)
            print("- year field updated")
        except Exception as ex:
            print(ex)
    except Exception as ex:
        print(ex)

    # trying 2020 NDVI
    try:
        # establish parameters for ndvi
        ndviWorkspace = arcpy.env.workspace + "\\LandsatNDVI"
        terrainWorkspace = arcpy.env.workspace + "\\Terrain"
        landsat2020file = ndviWorkspace + "\\2020\\LC08_L1TP_035034_20200115_20200823_02_T1_MTL.txt"
        ndvi2020file = outputData + "\\ndvi2020File.tif"
        try:
            # process ndvi file
            ndvi_raster = arcpy.ia.NDVI(landsat2020file, 5, 4)
            ndvi_raster.save(ndvi2020file)
            print("- 2020 NDVI raster created and saved")

            # clip ndvi file
            ndvi2020_clip = ndviWorkspace + "\\ndvi2020_clip.tif"
            arcpy.Clip_management(ndvi2020file, projectBoundary, ndvi2020_clip)
            print("- 2020 ndvi file clipped")

            # reclassify ndvi file
            reclass_ndvi2020 = Reclassify(ndvi2020_clip, "Value", RemapRange([[-1, 0, "NODATA"], [0, 0.1, 1],
                                                                              [0.1, 0.5, 2], [0.5, 1, 3]]))
            reclass_ndvi2020.save(ndviWorkspace + "\\ndvi2020_clip_reclass.tif")
            print("- 2020 ndvi reclassified")

            # establish polygons
            reclass_ndvi2020 = ndviWorkspace + "\\ndvi2020_clip_reclass.tif"
            ndvi2020_polygons = ndviWorkspace + "\\ndvi2020_polygons.shp"
            arcpy.RasterToPolygon_conversion(reclass_ndvi2020, ndvi2020_polygons)
            print("- shapefile for 2020 converted to polygons")

            # add fields
            arcpy.AddField_management(ndvi2020_polygons, "VEG_DESC", "TEXT", "", "", 35, "VEG_DESC")
            print("- veg field created")
            arcpy.AddField_management(ndvi2020_polygons, "YEAR", "TEXT", "", "", 4, "YEAR")
            print("- year field created")

            # update cursor
            fc = ndvi2020_polygons
            fields = ["gridcode", "VEG_DESC"]
            with arcpy.da.UpdateCursor(fc, fields) as cursor:
                for row in cursor:
                    if row[0] == 1:
                        row[1] = "Bare Earth"
                    if row[0] == 2:
                        row[1] = "Sparse Vegetation"
                    if row[0] == 3:
                        row[1] = "Heavy Vegetation"
                    cursor.updateRow(row)
            print("- field updated")

            # calculate year field
            fc = ndvi2020_polygons
            fields = ["gridcode", "YEAR"]
            with arcpy.da.UpdateCursor(fc, fields) as cursor:
                for row in cursor:
                    if row[0] < 4:
                        row[1] = "2020"
                    cursor.updateRow(row)
            print("- year field updated")
        except Exception as ex:
            print(ex)
    except Exception as ex:
        print(ex)

    # trying 2022 NDVI
    try:
        # establish parameters for ndvi
        ndviWorkspace = arcpy.env.workspace + "\\LandsatNDVI"
        terrainWorkspace = arcpy.env.workspace + "\\Terrain"
        landsat2022file = ndviWorkspace + "\\2022\\LC09_L1TP_035034_20220128_20230430_02_T1_MTL.txt"
        ndvi2022file = outputData + "\\ndvi2022File.tif"
        try:
            # process ndvi file
            ndvi_raster = arcpy.ia.NDVI(landsat2022file, 5, 4)
            ndvi_raster.save(ndvi2022file)
            print("- 2022 NDVI raster created and saved")

            # clip ndvi file
            ndvi2022_clip = ndviWorkspace + "\\ndvi2022_clip.tif"
            arcpy.Clip_management(ndvi2022file, projectBoundary, ndvi2022_clip)
            print("- 2022 ndvi file clipped")

            # reclassify ndvi file
            reclass_ndvi2022 = Reclassify(ndvi2022_clip, "Value", RemapRange([[-1, 0, "NODATA"], [0, 0.1, 1],
                                                                              [0.1, 0.5, 2], [0.5, 1, 3]]))
            reclass_ndvi2022.save(ndviWorkspace + "\\ndvi2022_clip_reclass.tif")
            print("- ndvi 2022 reclassified")

            # create polygons
            reclass_ndvi2022 = ndviWorkspace + "\\ndvi2022_clip_reclass.tif"
            ndvi2022_polygons = ndviWorkspace + "\\ndvi2022_polygons.shp"
            arcpy.RasterToPolygon_conversion(reclass_ndvi2022, ndvi2022_polygons)
            print("- shapefile for 2022 converted to polygons")

            # add fields
            arcpy.AddField_management(ndvi2022_polygons, "VEG_DESC", "TEXT", "", "", 35, "VEG_DESC")
            print("- field created")
            arcpy.AddField_management(ndvi2022_polygons, "YEAR", "TEXT", "", "", 4, "YEAR")
            print("- year field created")

            # update cursor
            fc = ndvi2022_polygons
            fields = ["Value", "VEG_DESC"]
            with arcpy.da.UpdateCursor(fc, fields) as cursor:
                for row in cursor:
                    if row[0] == 1:
                        row[1] = "Bare Earth"
                    if row[0] == 2:
                        row[1] = "Sparse Vegetation"
                    if row[0] == 3:
                        row[1] = "Heavy Vegetation"
                    cursor.updateRow(row)
            print("- field updated")

            # calculate year field
            fc = ndvi2022_polygons
            fields = ["gridcode", "YEAR"]
            with arcpy.da.UpdateCursor(fc, fields) as cursor:
                for row in cursor:
                    if row[0] < 4:
                        row[1] = "2022"
                    cursor.updateRow(row)
            print("- year field updated")
        except Exception as ex:
            print(ex)
    except Exception as ex:
        print(ex)
    # merge ndvi polygons
    try:
        # establish local parameters
        ndviWorkspace = arcpy.env.workspace + "\\LandsatNDVI"
        ndvi2017_polygons = ndviWorkspace + "\\ndvi2017_polygons.shp"
        ndvi2018_polygons = ndviWorkspace + "\\ndvi2018_polygons.shp"
        ndvi2019_polygons = ndviWorkspace + "\\ndvi2019_polygons.shp"
        ndvi2020_polygons = ndviWorkspace + "\\ndvi2020_polygons.shp"
        ndvi2022_polygons = ndviWorkspace + "\\ndvi2022_polygons.shp"
        ndviPolygons_all = ndviWorkspace + "\\ndvi_polygons_all.shp"
        ndviPolygons_projected = ndviWorkspace + "\\ndvi_polygons_all_projected.shp"

        try:
            # merge ndvi polygons
            arcpy.Merge_management([ndvi2017_polygons, ndvi2018_polygons, ndvi2019_polygons, ndvi2020_polygons,
                                    ndvi2022_polygons], ndviPolygons_all)
            print("- all ndvi polygons merged")

            # project ndvi polygons
            arcpy.Project_management(ndviPolygons_all, ndviPolygons_projected, PCSsr)
            print("- coordinate system projected")

            # delete excess ndvi files
            arcpy.Delete_management([ndvi2017_polygons, ndvi2018_polygons, ndvi2019_polygons, ndvi2020_polygons,
                                     ndvi2022_polygons, ndviPolygons_all])
            print("- individual ndvi files deleted")
        except Exception as ex:
            print(ex)
    except Exception as ex:
        print(ex)
except Exception as ex:
    print(ex)
print("vegetation classifications and polygons created. Woo!")

# create geomorphon file
print("creating geomorphon file and polygons ... ")
try:
    # establish local parameters
    demMosaic = gdbName + "\\demMosaic2"
    demFiles = arcpy.env.workspace + "\\DEM"
    terrainWorkspace = arcpy.env.workspace + "\\Terrain"
    geomorphonRaster = terrainWorkspace + "\\GeomorphonLandforms.tif"
    geomorphonClipped = terrainWorkspace + "\\Geomorphon_Clipped.tif"
    geomorphonPolygons = terrainWorkspace + "\\GeomorphonPolygons.shp"

    try:
        # run geomorph tool
        outGeomorphLandforms = GeomorphonLandforms(demMosaic, "", "", "METERS")
        outGeomorphLandforms.save(geomorphonRaster)
        print("- geomorphon raster created")

        # clip raster
        arcpy.Clip_management(geomorphonRaster, projectBoundary, geomorphonClipped)
        print("- geomorphon clipped")

        # create polygons
        arcpy.RasterToPolygon_conversion(geomorphonClipped, geomorphonPolygons)
        print("- geomorphon polygons created")
        arcpy.AddField_management(geomorphonPolygons, "FEAT_DESC", "TEXT", "", "", 15, "FEAT_DESC", "NULLABLE",
                                  "REQUIRED")
        print("- field added ")

        # adjust field
        fc = geomorphonPolygons
        fields = ["gridcode", "FEAT_DESC"]
        with arcpy.da.UpdateCursor(fc, fields) as cursor:
            for row in cursor:
                if row[0] == 1:
                    row[1] = "Flat"
                if row[0] == 2:
                    row[1] = "Peak"
                if row[0] == 3:
                    row[1] = "Ridge"
                if row[0] == 4:
                    row[1] = "Shoulder"
                if row[0] == 5:
                    row[1] = "Spur"
                if row[0] == 6:
                    row[1] = "Slope"
                if row[0] == 7:
                    row[1] = "Hollow"
                if row[0] == 8:
                    row[1] = "Footslope"
                if row[0] == 9:
                    row[1] = "Valley"
                if row[0] == 10:
                    row[1] = "Pit"
                cursor.updateRow(row)
        print("- field updated")
    except Exception as ex:
        print(ex)
    try:
        # delete unused files
        arcpy.Delete_management(geomorphonRaster)
        print("- geomorphon file deleted")
    except Exception as ex:
        print(ex)
except Exception as ex:
    print(ex)
print("geomorphon landforms established. Good job!")

# resample and merge MD datasets
print("resampling HRRR files")
try:
    winter17HRRR_rs = arcpy.env.workspace + "\\HRRRData\\Resampled\\16-17winterHRRR_resampled.crf"
    winter18HRRR_rs = arcpy.env.workspace + "\\HRRRData\\Resampled\\17-18winterHRRR_resampled.crf"
    winter19HRRR_rs = arcpy.env.workspace + "\\HRRRData\\Resampled\\18-19winterHRRR_resampled.crf"
    winter20HRRR_rs = arcpy.env.workspace + "\\HRRRData\\Resampled\\19-20winterHRRR_resampled.crf"
    try:
        winter17HRRR = arcpy.env.workspace + "\\HRRRData\\16-17winterHRRR.crf"
        arcpy.Resample_management(winter17HRRR, winter17HRRR_rs, "100")
        print("- winter 17 resampled")

        winter18HRRR = arcpy.env.workspace + "\\HRRRData\\17-18winterHRRR.crf"
        arcpy.Resample_management(winter18HRRR, winter18HRRR_rs, "100")
        print("- winter 18 resampled")

        winter19HRRR = arcpy.env.workspace + "\\HRRRData\\18-19winterHRRR.crf"
        arcpy.Resample_management(winter19HRRR, winter19HRRR_rs, "100")
        print("- winter 19 resampled")

        winter20 = arcpy.env.workspace + "\\HRRRData\\19-20winterHRRR.crf"
        arcpy.Resample_management(winter20, winter20HRRR_rs, "100")
        print("- winter 20 resampled")
    except Exception as ex:
        print(ex)
except Exception as ex:
    print(ex)
print("data is prepped for analysis")
